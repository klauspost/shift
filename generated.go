// Code generated by go generate gen.go. DO NOT EDIT.

package shift


// LeftU8U8 is x << n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func LeftU8U8(x uint8, n uint8) uint8 {
	return x << (n & maskU8U8)
}

// RightU8U8 is x >> n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func RightU8U8(x uint8, n uint8) uint8 {
	return x >> (n & maskU8U8)
}

// LeftU8U16 is x << n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func LeftU8U16(x uint8, n uint16) uint8 {
	return x << (n & maskU8U16)
}

// RightU8U16 is x >> n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func RightU8U16(x uint8, n uint16) uint8 {
	return x >> (n & maskU8U16)
}

// LeftU8U32 is x << n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func LeftU8U32(x uint8, n uint32) uint8 {
	return x << (n & maskU8U32)
}

// RightU8U32 is x >> n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func RightU8U32(x uint8, n uint32) uint8 {
	return x >> (n & maskU8U32)
}

// LeftU8U64 is x << n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func LeftU8U64(x uint8, n uint64) uint8 {
	return x << (n & maskU8U64)
}

// RightU8U64 is x >> n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func RightU8U64(x uint8, n uint64) uint8 {
	return x >> (n & maskU8U64)
}

// LeftU8U is x << n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func LeftU8U(x uint8, n uint) uint8 {
	return x << (n & maskU8U)
}

// RightU8U is x >> n but where n is always less than the number of bits in uint8.
// This assumption is not checked.
func RightU8U(x uint8, n uint) uint8 {
	return x >> (n & maskU8U)
}

// LeftU16U8 is x << n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func LeftU16U8(x uint16, n uint8) uint16 {
	return x << (n & maskU16U8)
}

// RightU16U8 is x >> n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func RightU16U8(x uint16, n uint8) uint16 {
	return x >> (n & maskU16U8)
}

// LeftU16U16 is x << n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func LeftU16U16(x uint16, n uint16) uint16 {
	return x << (n & maskU16U16)
}

// RightU16U16 is x >> n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func RightU16U16(x uint16, n uint16) uint16 {
	return x >> (n & maskU16U16)
}

// LeftU16U32 is x << n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func LeftU16U32(x uint16, n uint32) uint16 {
	return x << (n & maskU16U32)
}

// RightU16U32 is x >> n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func RightU16U32(x uint16, n uint32) uint16 {
	return x >> (n & maskU16U32)
}

// LeftU16U64 is x << n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func LeftU16U64(x uint16, n uint64) uint16 {
	return x << (n & maskU16U64)
}

// RightU16U64 is x >> n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func RightU16U64(x uint16, n uint64) uint16 {
	return x >> (n & maskU16U64)
}

// LeftU16U is x << n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func LeftU16U(x uint16, n uint) uint16 {
	return x << (n & maskU16U)
}

// RightU16U is x >> n but where n is always less than the number of bits in uint16.
// This assumption is not checked.
func RightU16U(x uint16, n uint) uint16 {
	return x >> (n & maskU16U)
}

// LeftU32U8 is x << n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func LeftU32U8(x uint32, n uint8) uint32 {
	return x << (n & maskU32U8)
}

// RightU32U8 is x >> n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func RightU32U8(x uint32, n uint8) uint32 {
	return x >> (n & maskU32U8)
}

// LeftU32U16 is x << n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func LeftU32U16(x uint32, n uint16) uint32 {
	return x << (n & maskU32U16)
}

// RightU32U16 is x >> n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func RightU32U16(x uint32, n uint16) uint32 {
	return x >> (n & maskU32U16)
}

// LeftU32U32 is x << n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func LeftU32U32(x uint32, n uint32) uint32 {
	return x << (n & maskU32U32)
}

// RightU32U32 is x >> n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func RightU32U32(x uint32, n uint32) uint32 {
	return x >> (n & maskU32U32)
}

// LeftU32U64 is x << n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func LeftU32U64(x uint32, n uint64) uint32 {
	return x << (n & maskU32U64)
}

// RightU32U64 is x >> n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func RightU32U64(x uint32, n uint64) uint32 {
	return x >> (n & maskU32U64)
}

// LeftU32U is x << n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func LeftU32U(x uint32, n uint) uint32 {
	return x << (n & maskU32U)
}

// RightU32U is x >> n but where n is always less than the number of bits in uint32.
// This assumption is not checked.
func RightU32U(x uint32, n uint) uint32 {
	return x >> (n & maskU32U)
}

// LeftU64U8 is x << n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func LeftU64U8(x uint64, n uint8) uint64 {
	return x << (n & maskU64U8)
}

// RightU64U8 is x >> n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func RightU64U8(x uint64, n uint8) uint64 {
	return x >> (n & maskU64U8)
}

// LeftU64U16 is x << n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func LeftU64U16(x uint64, n uint16) uint64 {
	return x << (n & maskU64U16)
}

// RightU64U16 is x >> n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func RightU64U16(x uint64, n uint16) uint64 {
	return x >> (n & maskU64U16)
}

// LeftU64U32 is x << n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func LeftU64U32(x uint64, n uint32) uint64 {
	return x << (n & maskU64U32)
}

// RightU64U32 is x >> n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func RightU64U32(x uint64, n uint32) uint64 {
	return x >> (n & maskU64U32)
}

// LeftU64U64 is x << n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func LeftU64U64(x uint64, n uint64) uint64 {
	return x << (n & maskU64U64)
}

// RightU64U64 is x >> n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func RightU64U64(x uint64, n uint64) uint64 {
	return x >> (n & maskU64U64)
}

// LeftU64U is x << n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func LeftU64U(x uint64, n uint) uint64 {
	return x << (n & maskU64U)
}

// RightU64U is x >> n but where n is always less than the number of bits in uint64.
// This assumption is not checked.
func RightU64U(x uint64, n uint) uint64 {
	return x >> (n & maskU64U)
}

// LeftUU8 is x << n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func LeftUU8(x uint, n uint8) uint {
	return x << (n & maskUU8)
}

// RightUU8 is x >> n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func RightUU8(x uint, n uint8) uint {
	return x >> (n & maskUU8)
}

// LeftUU16 is x << n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func LeftUU16(x uint, n uint16) uint {
	return x << (n & maskUU16)
}

// RightUU16 is x >> n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func RightUU16(x uint, n uint16) uint {
	return x >> (n & maskUU16)
}

// LeftUU32 is x << n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func LeftUU32(x uint, n uint32) uint {
	return x << (n & maskUU32)
}

// RightUU32 is x >> n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func RightUU32(x uint, n uint32) uint {
	return x >> (n & maskUU32)
}

// LeftUU64 is x << n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func LeftUU64(x uint, n uint64) uint {
	return x << (n & maskUU64)
}

// RightUU64 is x >> n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func RightUU64(x uint, n uint64) uint {
	return x >> (n & maskUU64)
}

// LeftUU is x << n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func LeftUU(x uint, n uint) uint {
	return x << (n & maskUU)
}

// RightUU is x >> n but where n is always less than the number of bits in uint.
// This assumption is not checked.
func RightUU(x uint, n uint) uint {
	return x >> (n & maskUU)
}

// LeftI8U8 is x << n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func LeftI8U8(x int8, n uint8) int8 {
	return x << (n & maskI8U8)
}

// RightI8U8 is x >> n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func RightI8U8(x int8, n uint8) int8 {
	return x >> (n & maskI8U8)
}

// LeftI8U16 is x << n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func LeftI8U16(x int8, n uint16) int8 {
	return x << (n & maskI8U16)
}

// RightI8U16 is x >> n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func RightI8U16(x int8, n uint16) int8 {
	return x >> (n & maskI8U16)
}

// LeftI8U32 is x << n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func LeftI8U32(x int8, n uint32) int8 {
	return x << (n & maskI8U32)
}

// RightI8U32 is x >> n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func RightI8U32(x int8, n uint32) int8 {
	return x >> (n & maskI8U32)
}

// LeftI8U64 is x << n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func LeftI8U64(x int8, n uint64) int8 {
	return x << (n & maskI8U64)
}

// RightI8U64 is x >> n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func RightI8U64(x int8, n uint64) int8 {
	return x >> (n & maskI8U64)
}

// LeftI8U is x << n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func LeftI8U(x int8, n uint) int8 {
	return x << (n & maskI8U)
}

// RightI8U is x >> n but where n is always less than the number of bits in int8.
// This assumption is not checked.
func RightI8U(x int8, n uint) int8 {
	return x >> (n & maskI8U)
}

// LeftI16U8 is x << n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func LeftI16U8(x int16, n uint8) int16 {
	return x << (n & maskI16U8)
}

// RightI16U8 is x >> n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func RightI16U8(x int16, n uint8) int16 {
	return x >> (n & maskI16U8)
}

// LeftI16U16 is x << n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func LeftI16U16(x int16, n uint16) int16 {
	return x << (n & maskI16U16)
}

// RightI16U16 is x >> n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func RightI16U16(x int16, n uint16) int16 {
	return x >> (n & maskI16U16)
}

// LeftI16U32 is x << n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func LeftI16U32(x int16, n uint32) int16 {
	return x << (n & maskI16U32)
}

// RightI16U32 is x >> n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func RightI16U32(x int16, n uint32) int16 {
	return x >> (n & maskI16U32)
}

// LeftI16U64 is x << n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func LeftI16U64(x int16, n uint64) int16 {
	return x << (n & maskI16U64)
}

// RightI16U64 is x >> n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func RightI16U64(x int16, n uint64) int16 {
	return x >> (n & maskI16U64)
}

// LeftI16U is x << n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func LeftI16U(x int16, n uint) int16 {
	return x << (n & maskI16U)
}

// RightI16U is x >> n but where n is always less than the number of bits in int16.
// This assumption is not checked.
func RightI16U(x int16, n uint) int16 {
	return x >> (n & maskI16U)
}

// LeftI32U8 is x << n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func LeftI32U8(x int32, n uint8) int32 {
	return x << (n & maskI32U8)
}

// RightI32U8 is x >> n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func RightI32U8(x int32, n uint8) int32 {
	return x >> (n & maskI32U8)
}

// LeftI32U16 is x << n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func LeftI32U16(x int32, n uint16) int32 {
	return x << (n & maskI32U16)
}

// RightI32U16 is x >> n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func RightI32U16(x int32, n uint16) int32 {
	return x >> (n & maskI32U16)
}

// LeftI32U32 is x << n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func LeftI32U32(x int32, n uint32) int32 {
	return x << (n & maskI32U32)
}

// RightI32U32 is x >> n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func RightI32U32(x int32, n uint32) int32 {
	return x >> (n & maskI32U32)
}

// LeftI32U64 is x << n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func LeftI32U64(x int32, n uint64) int32 {
	return x << (n & maskI32U64)
}

// RightI32U64 is x >> n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func RightI32U64(x int32, n uint64) int32 {
	return x >> (n & maskI32U64)
}

// LeftI32U is x << n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func LeftI32U(x int32, n uint) int32 {
	return x << (n & maskI32U)
}

// RightI32U is x >> n but where n is always less than the number of bits in int32.
// This assumption is not checked.
func RightI32U(x int32, n uint) int32 {
	return x >> (n & maskI32U)
}

// LeftI64U8 is x << n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func LeftI64U8(x int64, n uint8) int64 {
	return x << (n & maskI64U8)
}

// RightI64U8 is x >> n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func RightI64U8(x int64, n uint8) int64 {
	return x >> (n & maskI64U8)
}

// LeftI64U16 is x << n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func LeftI64U16(x int64, n uint16) int64 {
	return x << (n & maskI64U16)
}

// RightI64U16 is x >> n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func RightI64U16(x int64, n uint16) int64 {
	return x >> (n & maskI64U16)
}

// LeftI64U32 is x << n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func LeftI64U32(x int64, n uint32) int64 {
	return x << (n & maskI64U32)
}

// RightI64U32 is x >> n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func RightI64U32(x int64, n uint32) int64 {
	return x >> (n & maskI64U32)
}

// LeftI64U64 is x << n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func LeftI64U64(x int64, n uint64) int64 {
	return x << (n & maskI64U64)
}

// RightI64U64 is x >> n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func RightI64U64(x int64, n uint64) int64 {
	return x >> (n & maskI64U64)
}

// LeftI64U is x << n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func LeftI64U(x int64, n uint) int64 {
	return x << (n & maskI64U)
}

// RightI64U is x >> n but where n is always less than the number of bits in int64.
// This assumption is not checked.
func RightI64U(x int64, n uint) int64 {
	return x >> (n & maskI64U)
}

// LeftIU8 is x << n but where n is always less than the number of bits in int.
// This assumption is not checked.
func LeftIU8(x int, n uint8) int {
	return x << (n & maskIU8)
}

// RightIU8 is x >> n but where n is always less than the number of bits in int.
// This assumption is not checked.
func RightIU8(x int, n uint8) int {
	return x >> (n & maskIU8)
}

// LeftIU16 is x << n but where n is always less than the number of bits in int.
// This assumption is not checked.
func LeftIU16(x int, n uint16) int {
	return x << (n & maskIU16)
}

// RightIU16 is x >> n but where n is always less than the number of bits in int.
// This assumption is not checked.
func RightIU16(x int, n uint16) int {
	return x >> (n & maskIU16)
}

// LeftIU32 is x << n but where n is always less than the number of bits in int.
// This assumption is not checked.
func LeftIU32(x int, n uint32) int {
	return x << (n & maskIU32)
}

// RightIU32 is x >> n but where n is always less than the number of bits in int.
// This assumption is not checked.
func RightIU32(x int, n uint32) int {
	return x >> (n & maskIU32)
}

// LeftIU64 is x << n but where n is always less than the number of bits in int.
// This assumption is not checked.
func LeftIU64(x int, n uint64) int {
	return x << (n & maskIU64)
}

// RightIU64 is x >> n but where n is always less than the number of bits in int.
// This assumption is not checked.
func RightIU64(x int, n uint64) int {
	return x >> (n & maskIU64)
}

// LeftIU is x << n but where n is always less than the number of bits in int.
// This assumption is not checked.
func LeftIU(x int, n uint) int {
	return x << (n & maskIU)
}

// RightIU is x >> n but where n is always less than the number of bits in int.
// This assumption is not checked.
func RightIU(x int, n uint) int {
	return x >> (n & maskIU)
}
